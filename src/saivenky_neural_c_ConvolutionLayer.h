/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class saivenky_neural_c_ConvolutionLayer */

#ifndef _Included_saivenky_neural_c_ConvolutionLayer
#define _Included_saivenky_neural_c_ConvolutionLayer
#ifdef __cplusplus
extern "C" {
#endif
#undef saivenky_neural_c_ConvolutionLayer_SIZEOF_DOUBLE
#define saivenky_neural_c_ConvolutionLayer_SIZEOF_DOUBLE 8L
/*
 * Class:     saivenky_neural_c_ConvolutionLayer
 * Method:    create
 * Signature: ([I[IIILjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)J
 */
JNIEXPORT jlong JNICALL Java_saivenky_neural_c_ConvolutionLayer_create
  (JNIEnv *, jobject, jintArray, jintArray, jint, jint, jobject, jobject);

/*
 * Class:     saivenky_neural_c_ConvolutionLayer
 * Method:    destroy
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_saivenky_neural_c_ConvolutionLayer_destroy
  (JNIEnv *, jobject, jlong);

/*
 * Class:     saivenky_neural_c_ConvolutionLayer
 * Method:    feedforward
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_saivenky_neural_c_ConvolutionLayer_feedforward
  (JNIEnv *, jobject, jlong);

/*
 * Class:     saivenky_neural_c_ConvolutionLayer
 * Method:    backpropogate
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_saivenky_neural_c_ConvolutionLayer_backpropogate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     saivenky_neural_c_ConvolutionLayer
 * Method:    update
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_saivenky_neural_c_ConvolutionLayer_update
  (JNIEnv *, jobject, jlong, jdouble);

#ifdef __cplusplus
}
#endif
#endif
