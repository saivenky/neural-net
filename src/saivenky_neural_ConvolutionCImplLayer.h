/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class saivenky_neural_ConvolutionCImplLayer */

#ifndef _Included_saivenky_neural_ConvolutionCImplLayer
#define _Included_saivenky_neural_ConvolutionCImplLayer
#ifdef __cplusplus
extern "C" {
#endif
#undef saivenky_neural_ConvolutionCImplLayer_SIZEOF_DOUBLE
#define saivenky_neural_ConvolutionCImplLayer_SIZEOF_DOUBLE 8L
/*
 * Class:     saivenky_neural_ConvolutionCImplLayer
 * Method:    createNativeLayer
 * Signature: ([I[III)J
 */
JNIEXPORT jlong JNICALL Java_saivenky_neural_ConvolutionCImplLayer_createNativeLayer
  (JNIEnv *, jobject, jintArray, jintArray, jint, jint);

/*
 * Class:     saivenky_neural_ConvolutionCImplLayer
 * Method:    applyConvolution
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_saivenky_neural_ConvolutionCImplLayer_applyConvolution
  (JNIEnv *, jobject, jlong);

/*
 * Class:     saivenky_neural_ConvolutionCImplLayer
 * Method:    backpropogateToProperties
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_saivenky_neural_ConvolutionCImplLayer_backpropogateToProperties
  (JNIEnv *, jobject, jlong);

/*
 * Class:     saivenky_neural_ConvolutionCImplLayer
 * Method:    updateProperties
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_saivenky_neural_ConvolutionCImplLayer_updateProperties
  (JNIEnv *, jobject, jlong, jdouble);

#ifdef __cplusplus
}
#endif
#endif
